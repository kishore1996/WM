/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.readthefile.sqrfiles.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.readthefile.sqrfiles.Fileinfo;
import com.readthefile.sqrfiles.service.FileinfoService;


/**
 * Controller object for domain model class Fileinfo.
 * @see Fileinfo
 */
@RestController("sqrfiles.FileinfoController")
@Api(value = "FileinfoController", description = "Exposes APIs to work with Fileinfo resource.")
@RequestMapping("/sqrfiles/Fileinfo")
public class FileinfoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FileinfoController.class);

    @Autowired
	@Qualifier("sqrfiles.FileinfoService")
	private FileinfoService fileinfoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Fileinfo instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Fileinfo createFileinfo(@RequestPart("wm_data_json") Fileinfo fileinfo, @RequestPart(value = "filecontent", required = false) MultipartFile _filecontent) {
		LOGGER.debug("Create Fileinfo with information: {}" , fileinfo);

    fileinfo.setFilecontent(WMMultipartUtils.toByteArray(_filecontent));
		fileinfo = fileinfoService.create(fileinfo);
		LOGGER.debug("Created Fileinfo with information: {}" , fileinfo);

	    return fileinfo;
	}

    @ApiOperation(value = "Returns the Fileinfo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Fileinfo getFileinfo(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Fileinfo with id: {}" , id);

        Fileinfo foundFileinfo = fileinfoService.getById(id);
        LOGGER.debug("Fileinfo details with id: {}" , foundFileinfo);

        return foundFileinfo;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Fileinfo instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getFileinfoBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Fileinfo instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Fileinfo.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Fileinfo fileinfo = fileinfoService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(fileinfo, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Fileinfo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Fileinfo editFileinfo(@PathVariable("id") Integer id, @RequestBody Fileinfo fileinfo) {
        LOGGER.debug("Editing Fileinfo with id: {}" , fileinfo.getId());

        fileinfo.setId(id);
        fileinfo = fileinfoService.update(fileinfo);
        LOGGER.debug("Fileinfo details with id: {}" , fileinfo);

        return fileinfo;
    }

    @ApiOperation(value = "Updates the Fileinfo instance associated with the given id.This API should be used when Fileinfo instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Fileinfo editFileinfo(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Fileinfo newFileinfo = WMMultipartUtils.toObject(multipartHttpServletRequest, Fileinfo.class, "sqrfiles");
        newFileinfo.setId(id);

        Fileinfo oldFileinfo = fileinfoService.getById(id);
        WMMultipartUtils.updateLobsContent(oldFileinfo, newFileinfo);
        LOGGER.debug("Updating Fileinfo with information: {}" , newFileinfo);

        return fileinfoService.update(newFileinfo);
    }

    @ApiOperation(value = "Deletes the Fileinfo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFileinfo(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Fileinfo with id: {}" , id);

        Fileinfo deletedFileinfo = fileinfoService.delete(id);

        return deletedFileinfo != null;
    }

    /**
     * @deprecated Use {@link #findFileinfos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Fileinfo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Fileinfo> searchFileinfosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Fileinfos list by query filter:{}", (Object) queryFilters);
        return fileinfoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Fileinfo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Fileinfo> findFileinfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Fileinfos list by filter:", query);
        return fileinfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Fileinfo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Fileinfo> filterFileinfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Fileinfos list by filter", query);
        return fileinfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportFileinfos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return fileinfoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportFileinfosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Fileinfo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> fileinfoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Fileinfo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countFileinfos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Fileinfos");
		return fileinfoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getFileinfoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return fileinfoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FileinfoService instance
	 */
	protected void setFileinfoService(FileinfoService service) {
		this.fileinfoService = service;
	}

}
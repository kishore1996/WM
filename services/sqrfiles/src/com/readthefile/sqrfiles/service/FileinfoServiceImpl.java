/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.readthefile.sqrfiles.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.readthefile.sqrfiles.Fileinfo;


/**
 * ServiceImpl object for domain model class Fileinfo.
 *
 * @see Fileinfo
 */
@Service("sqrfiles.FileinfoService")
@Validated
public class FileinfoServiceImpl implements FileinfoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FileinfoServiceImpl.class);


    @Autowired
    @Qualifier("sqrfiles.FileinfoDao")
    private WMGenericDao<Fileinfo, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Fileinfo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "sqrfilesTransactionManager")
    @Override
    public Fileinfo create(Fileinfo fileinfo) {
        LOGGER.debug("Creating a new Fileinfo with information: {}", fileinfo);

        Fileinfo fileinfoCreated = this.wmGenericDao.create(fileinfo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(fileinfoCreated);
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager")
    @Override
    public Fileinfo getById(Integer fileinfoId) {
        LOGGER.debug("Finding Fileinfo by id: {}", fileinfoId);
        return this.wmGenericDao.findById(fileinfoId);
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager")
    @Override
    public Fileinfo findById(Integer fileinfoId) {
        LOGGER.debug("Finding Fileinfo by id: {}", fileinfoId);
        try {
            return this.wmGenericDao.findById(fileinfoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Fileinfo found with id: {}", fileinfoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager")
    @Override
    public List<Fileinfo> findByMultipleIds(List<Integer> fileinfoIds, boolean orderedReturn) {
        LOGGER.debug("Finding Fileinfos by ids: {}", fileinfoIds);

        return this.wmGenericDao.findByMultipleIds(fileinfoIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "sqrfilesTransactionManager")
    @Override
    public Fileinfo update(Fileinfo fileinfo) {
        LOGGER.debug("Updating Fileinfo with information: {}", fileinfo);

        this.wmGenericDao.update(fileinfo);
        this.wmGenericDao.refresh(fileinfo);

        return fileinfo;
    }

    @Transactional(value = "sqrfilesTransactionManager")
    @Override
    public Fileinfo delete(Integer fileinfoId) {
        LOGGER.debug("Deleting Fileinfo with id: {}", fileinfoId);
        Fileinfo deleted = this.wmGenericDao.findById(fileinfoId);
        if (deleted == null) {
            LOGGER.debug("No Fileinfo found with id: {}", fileinfoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Fileinfo.class.getSimpleName(), fileinfoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "sqrfilesTransactionManager")
    @Override
    public void delete(Fileinfo fileinfo) {
        LOGGER.debug("Deleting Fileinfo with {}", fileinfo);
        this.wmGenericDao.delete(fileinfo);
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager")
    @Override
    public Page<Fileinfo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Fileinfos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager")
    @Override
    public Page<Fileinfo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Fileinfos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sqrfiles for table Fileinfo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sqrfiles for table Fileinfo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "sqrfilesTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
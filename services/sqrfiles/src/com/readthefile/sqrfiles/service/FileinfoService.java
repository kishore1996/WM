/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.readthefile.sqrfiles.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.readthefile.sqrfiles.Fileinfo;

/**
 * Service object for domain model class {@link Fileinfo}.
 */
public interface FileinfoService {

    /**
     * Creates a new Fileinfo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Fileinfo if any.
     *
     * @param fileinfo Details of the Fileinfo to be created; value cannot be null.
     * @return The newly created Fileinfo.
     */
    Fileinfo create(@Valid Fileinfo fileinfo);


	/**
     * Returns Fileinfo by given id if exists.
     *
     * @param fileinfoId The id of the Fileinfo to get; value cannot be null.
     * @return Fileinfo associated with the given fileinfoId.
	 * @throws EntityNotFoundException If no Fileinfo is found.
     */
    Fileinfo getById(Integer fileinfoId);

    /**
     * Find and return the Fileinfo by given id if exists, returns null otherwise.
     *
     * @param fileinfoId The id of the Fileinfo to get; value cannot be null.
     * @return Fileinfo associated with the given fileinfoId.
     */
    Fileinfo findById(Integer fileinfoId);

	/**
     * Find and return the list of Fileinfos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param fileinfoIds The id's of the Fileinfo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Fileinfos associated with the given fileinfoIds.
     */
    List<Fileinfo> findByMultipleIds(List<Integer> fileinfoIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Fileinfo. It replaces all fields of the existing Fileinfo with the given fileinfo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Fileinfo if any.
     *
     * @param fileinfo The details of the Fileinfo to be updated; value cannot be null.
     * @return The updated Fileinfo.
     * @throws EntityNotFoundException if no Fileinfo is found with given input.
     */
    Fileinfo update(@Valid Fileinfo fileinfo);

    /**
     * Deletes an existing Fileinfo with the given id.
     *
     * @param fileinfoId The id of the Fileinfo to be deleted; value cannot be null.
     * @return The deleted Fileinfo.
     * @throws EntityNotFoundException if no Fileinfo found with the given id.
     */
    Fileinfo delete(Integer fileinfoId);

    /**
     * Deletes an existing Fileinfo with the given object.
     *
     * @param fileinfo The instance of the Fileinfo to be deleted; value cannot be null.
     */
    void delete(Fileinfo fileinfo);

    /**
     * Find all Fileinfos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Fileinfos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Fileinfo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Fileinfos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Fileinfos.
     *
     * @see Pageable
     * @see Page
     */
    Page<Fileinfo> findAll(String query, Pageable pageable);

    /**
     * Exports all Fileinfos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Fileinfos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Fileinfos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Fileinfo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}